{
  "contractName": "HeirToTheThrown",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "coefCostPerc",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "0x60806040526002600055348015601457600080fd5b50609e806100236000396000f300608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063cad96062146044575b600080fd5b348015604f57600080fd5b506056606c565b6040518082815260200191505060405180910390f35b600054815600a165627a7a7230582015a41e4df5d14f00dd5c35863d690ea4a4ac5bdbc1a7861a208a79a5f290cfb20029",
  "deployedBytecode": "0x608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063cad96062146044575b600080fd5b348015604f57600080fd5b506056606c565b6040518082815260200191505060405180910390f35b600054815600a165627a7a7230582015a41e4df5d14f00dd5c35863d690ea4a4ac5bdbc1a7861a208a79a5f290cfb20029",
  "sourceMap": "366:61:0:-;;;422:1;395:28;;366:61;8:9:-1;5:2;;;30:1;27;20:12;5:2;366:61:0;;;;;;;",
  "deployedSourceMap": "366:61:0:-;;;;;;;;;;;;;;;;;;;;;;;;395:28;;8:9:-1;5:2;;;30:1;27;20:12;5:2;395:28:0;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o",
  "source": "/* \nfunction transferCrown(address _newMonarch) public onlyMonarch {\n    _transferCrown(_newMonarch);\n}\n\n//why not put this in transferCrown?\nfunction _transferCrown(address _newMonarch) internal {\n    require(_newMonarch != address(0));\n    emit CrownTransferred(activeMonarchAddr, _newMonarch);\n    activeMonarchAddr = _newMonarch;\n}\n*/\npragma solidity ^0.4.24;\n\n\ncontract HeirToTheThrown {\n\n\tuint public coefCostPerc = 2;\n\n}\n\n\n/*\nimport \"./Ownable.sol\";\n\ncontract HeirToTheThrown is Ownable {\n    \n    //Points to latest contract\n    address public latestContract;\n\n\t//is using a mapping better than using an array here?\n\tdynasty[] public dynasties;\n\n\t//cost to become new monarch\n\tuint public crownCost;\n\n    //How much higher than the last each price has to be (as a percentage)\n\tuint public coefCostPerc = 2;\n    //Cost to abdicate (as a percentage)\n\tuint public abdicationCostPerc = 5;\n\t\n\t//Taxes pay towards\n\tuint public taxesHeld;\n\n\tstruct monarch {\n\t\taddress addr;\n\t\tstring name;\n\t\tuint costOfCrown;\n\t\tbool abdicated;\n\t}\n\n\tstruct dynasty {\n\t\tstring name;\n\t\tmonarch[] monarchs;\n\t\tuint totalMonarchs;//number of monarchs in this dynasty\n\t}\n\t\n\tmodifier onlyMonarch() {\n        require(msg.sender == getActiveMonarch().addr, \"Not the monarch\");\n        _;\n    }\n\n\t//Events\n\tevent DynastyStarted(address indexed DynastyStarter);\n\tevent CrownRenounced(address indexed previousMonarch);\n    event CrownTaken(address indexed previousMonarch, address indexed newMonarch, uint amount);\n    event TaxesPayed(address indexed from, address indexed currentMonarch, uint amount);\n\n\tconstructor(uint _startingCost) public payable {\n\t    latestContract = address(this);\n\t    contractOwner = msg.sender;\n\t\tcrownCost = _startingCost;\n\t\tstartDynasty(\"Flash\", \"First\");\n\t}\n\n\tfunction() public payable {\n\t\t//\n\t}\n\n\tfunction takeCrown(string _heirName) public payable {//TODO Check for exploits\n        require(msg.value + taxesHeld >= crownCost, \"Cannot afford the Crown\");\n\t\tuint value = msg.value + taxesHeld;\n        taxesHeld = 0;\n        \n    \tmonarch memory newMonarch = monarch(msg.sender, _heirName, value, false);\n\n\t\tif(dynasties.length == 1 && dynasties[0].monarchs.length < 1){\n            contractOwner.transfer(value);\n    \t\temit CrownTaken(contractOwner, newMonarch.addr, value);\n\t\t}else{\n            getActiveMonarch().addr.transfer(value);\n    \t\temit CrownTaken(getActiveMonarch().addr, newMonarch.addr, value);\n\t\t}\n\t\t\n\t\tdynasties[dynasties.length-1].monarchs.push(newMonarch);//TODO testing\n\t\tdynasties[dynasties.length-1].totalMonarchs++;\n\n    \tcrownCost =  value + value * coefCostPerc / 100;\n\t}\n    \n\tfunction startDynasty(string _heirName, string _dynastyName) public payable {\n\t    if(dynasties.length != 0){\n            require(dynasties[dynasties.length-1].monarchs[dynasties[dynasties.length-1].monarchs.length-1].abdicated, \"Last Dynasty is still going strong\");\n\t    }\n\t    dynasties.length++;\n\t    dynasties[dynasties.length-1].name = _dynastyName;\n\t\ttakeCrown(_heirName);\n\t\temit DynastyStarted(msg.sender);\n\t}\n\n\tfunction abdication() private {//TODO\n\n\t}\n\n\tfunction abdicate() public payable onlyMonarch {\n\t\trequire(msg.value >= getActiveMonarch().costOfCrown * abdicationCostPerc * 100);\n\t\tcontractOwner.transfer(getActiveMonarch().costOfCrown * abdicationCostPerc * 100);\n\t}\n\t\n\tfunction getActiveMonarch() private view returns (monarch) {\n\t    return dynasties[dynasties.length-1].monarchs[dynasties[dynasties.length-1].monarchs.length-1];\n\t}\n\t\n\tfunction getActiveMonarchAddr() external view returns (address) {\n\t    return dynasties[dynasties.length-1].monarchs[dynasties[dynasties.length-1].monarchs.length-1].addr;\n\t}\n\t\n\tfunction payTaxes() public payable {\n\t    taxesHeld += msg.value/2;\n\t    emit TaxesPayed(msg.sender, getActiveMonarch().addr, msg.value);\n\t}\n\t\n\t//Getters for monarch with indices\n\tfunction getMonarchAddr(uint _dynastyIndex, uint _monarchIndex) external view returns (address){\n\t    require(_dynastyIndex < dynasties.length && _monarchIndex < dynasties[_dynastyIndex].monarchs.length, \"Invalid monarch\");\n\t    return dynasties[_dynastyIndex].monarchs[_monarchIndex].addr;\n\t}\n\t\n\tfunction getMonarchName(uint _dynastyIndex, uint _monarchIndex) external view returns (string){\n        require(_dynastyIndex < dynasties.length && _monarchIndex < dynasties[_dynastyIndex].monarchs.length, \"Invalid monarch\");\n        return dynasties[_dynastyIndex].monarchs[_monarchIndex].name;\n\t}\n\t\n\tfunction getMonarchCrownCost(uint _dynastyIndex, uint _monarchIndex) external view returns (uint){\n\t \trequire(_dynastyIndex < dynasties.length && _monarchIndex < dynasties[_dynastyIndex].monarchs.length, \"Invalid monarch\");\n\t    return dynasties[_dynastyIndex].monarchs[_monarchIndex].costOfCrown;\n\t}\n\t\n\tfunction hasMonarchAbdicated(uint _dynastyIndex, uint _monarchIndex) external view returns (bool){\n\t    require(_dynastyIndex < dynasties.length && _monarchIndex < dynasties[_dynastyIndex].monarchs.length, \"Invalid monarch\");\n\t    return dynasties[_dynastyIndex].monarchs[_monarchIndex].abdicated;\n\t}\n\t\n\tfunction getActiveDynasty() private view returns (dynasty) {\n\t    return dynasties[dynasties.length-1];\n\t}\n\t\n\tfunction getTotalDynasties() external view returns (uint) {\n\t    return dynasties.length;\n\t}\n\t\n\tfunction changeAddr(address _newAddress) public onlyMonarch {\n\t    dynasties[dynasties.length-1].monarchs[dynasties[dynasties.length-1].monarchs.length-1].addr = _newAddress;// getActiveMonarch().addr does not work\n\t}\n\t\n\t//If this code gets updated, point to it here\n\tfunction setLatestContract(address _latestContract) public onlyContractOwner {\n\t    latestContract = _latestContract;\n\t}\n\t\n\tfunction contractWithdrawal() public onlyContractOwner {\n\t    msg.sender.transfer(address(this).balance-taxesHeld);//Withdraws anything that isn't taxes\n\t}\n\n}\n*/",
  "sourcePath": "/home/flashy/Git Repos/HeirToTheThrown/truffle/contracts/HeirToTheThrown.sol",
  "ast": {
    "absolutePath": "/home/flashy/Git Repos/HeirToTheThrown/truffle/contracts/HeirToTheThrown.sol",
    "exportedSymbols": {
      "HeirToTheThrown": [
        5
      ]
    },
    "id": 6,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".24"
        ],
        "nodeType": "PragmaDirective",
        "src": "339:24:0"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 5,
        "linearizedBaseContracts": [
          5
        ],
        "name": "HeirToTheThrown",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 4,
            "name": "coefCostPerc",
            "nodeType": "VariableDeclaration",
            "scope": 5,
            "src": "395:28:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 2,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "395:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "32",
              "id": 3,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "422:1:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_2_by_1",
                "typeString": "int_const 2"
              },
              "value": "2"
            },
            "visibility": "public"
          }
        ],
        "scope": 6,
        "src": "366:61:0"
      }
    ],
    "src": "339:5448:0"
  },
  "legacyAST": {
    "absolutePath": "/home/flashy/Git Repos/HeirToTheThrown/truffle/contracts/HeirToTheThrown.sol",
    "exportedSymbols": {
      "HeirToTheThrown": [
        5
      ]
    },
    "id": 6,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".24"
        ],
        "nodeType": "PragmaDirective",
        "src": "339:24:0"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 5,
        "linearizedBaseContracts": [
          5
        ],
        "name": "HeirToTheThrown",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 4,
            "name": "coefCostPerc",
            "nodeType": "VariableDeclaration",
            "scope": 5,
            "src": "395:28:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 2,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "395:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "32",
              "id": 3,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "422:1:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_2_by_1",
                "typeString": "int_const 2"
              },
              "value": "2"
            },
            "visibility": "public"
          }
        ],
        "scope": 6,
        "src": "366:61:0"
      }
    ],
    "src": "339:5448:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.4.24+commit.e67f0147.Emscripten.clang"
  },
  "networks": {
    "1538417440864": {
      "events": {},
      "links": {},
      "address": "0xa83732a5e29cc341e3354910f21dd3e3f47cf4c9",
      "transactionHash": "0xe338f006bd672e6250edb97331f71b3ce2fd7d0965e415ae607e0086b3cabe6e"
    }
  },
  "schemaVersion": "2.0.1",
  "updatedAt": "2018-10-01T18:21:51.190Z"
}